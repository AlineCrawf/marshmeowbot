# -*- coding: utf-8 -*-
"""Marshmeowbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11z5ib6Wir_LLML7PpcAqjtEIZ_Ihxcim
"""



from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  # for reply keyboard (sends message)

from time import sleep


bot = Bot(token='5918472294:AAGYqlSwmdwbFvnTroam00EyIRfL4tnINDE')
dp = Dispatcher(bot)

answers = []  # store the answers they have given


# language selection
lang1 = KeyboardButton('English üëç')  
lang2 = KeyboardButton('—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üí™')
lang3 = KeyboardButton('Other language ü§ù')
lang_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(lang1).add(lang2).add(lang3)


# sends welcome message after start
@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    await message.answer('Hello! Please select your language.\n–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É.', reply_markup = lang_kb)
    
# sends help message
@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await message.answer('We are a team of LGBT organizations from across Europe. We help you get into safety, provide support and answer any questions you may have. Press /start to get started. \n–ú–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ –õ–ì–ë–¢-–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π –∑ —É—Å—ñ—î—ó –Ñ–≤—Ä–æ–ø–∏. –ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –≤–∞–º —É–≤—ñ–π—Ç–∏ –≤ –±–µ–∑–ø–µ–∫—É, –Ω–∞–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –±—É–¥—å-—è–∫—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏.')

# options selection: English
en_options1 = KeyboardButton('Psychological support üß†')
en_options2 = KeyboardButton('Supplies: food, medicine, hormones, ... üçá')
en_options3 = KeyboardButton('Border crossing üèá')
en_options4 = KeyboardButton('Other help üìö')
en_options_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(en_options1).add(en_options2).add(en_options3).add(en_options4)

#### selecting what you need
@dp.message_handler(regexp='English üëç')
async def english(message: types.Message):
    answers.append(message.text)
    await message.answer('What do you need?', reply_markup = en_options_kb)

    
# this is the last line
executor.start_polling(dp)